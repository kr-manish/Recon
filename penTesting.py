import os
import json
import re
import shutil
import subprocess
import argparse
from util import *

class colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    YELLOW = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

FAIL = 1
PASS = 0

# OUTPUT_DIR = os.path.join(os.getenv('HOME'), 'BugBounty')

# print colors.FAIL+ "Warning: ...." + colors.ENDC

def argsParser():
    parser = argparse.ArgumentParser(description='This tool is to automate the recon process of any target')
    parser.add_argument('target', metavar='Ip', help="The ip of the target")
    parser.add_argument('-t', '--targets', help="List of comma separated targets")
    parser.add_argument('-tf', '--tfile', help="File containing targets one per line")
    return parser.parse_args()


# Function to run the commands
def runCommand(cmd):
    run_command = subprocess.Popen(cmd,
                                   stdout=subprocess.PIPE,
                                   stderr=subprocess.STDOUT,
                                   shell=True)
    stdout, stderr = run_command.communicate()
    if(stderr):
        print("{0} Something went wrong!!! {1}".format(colors.FAIL, colors.ENDC))
        print(stderr)
        return FAIL
    else:
        print("{0} Command ran successfully, I guess!!! {1}".format(colors.OKGREEN, colors.ENDC))
'''
# Sub-domain finder
def runAmass(Target, path):
    out = os.path.join(path['amass'], 'amass.txt')
    
    if os.path.isfile(out):
        os.remove(out)

    if os.path.isdir(os.path.join(os.getenv('HOME'), 'snap', 'amass')):
        shutil.rmtree(os.path.join(os.getenv('HOME'), 'snap', 'amass'))
'''


def ping_target(ip):
    pass


# Run the scans on the target
def runScans(args):
    """
    This is to run all the recon tools on the target
    """
    # Check if the target is valid and reachable
    valid = ping_target()
    if(valid):
        pass
    else:
        print("{0}[-] Not valid address! {1}".format(colors.FAIL,
                                                   colors.ENDC))
        sys.exit(0)

if __name__ == "__main__":
    args = argsParser()
    Target = args.target
    print(Target)

    runScans(args)

    '''recon = ['amass', 'subfinder', 'gobuster', 'massdns', 'masscan',
             'eyewitness']

    # Target directory
    if os.path.isdir(OUTPUT_DIR):
        print("Bug Bounty folder -> {0}{1}{2}{3}".format(colors.BOLD, colors.YELLOW, OUTPUT_DIR,colors.ENDC))
    else:
        os.makedirs(OUTPUT_DIR)
        print("Bug Bounty folder -> {0}{1}{2}".format(colors.YELLOW, OUTPUT_DIR,colors.ENDC))

    target_dir = os.path.join(OUTPUT_DIR, Target)
    if not os.path.isdir(target_dir):
        os.makedirs(target_dir)
    resultDir = create_dir(recon, target_dir)

    # RunReconTools
    RunRecon(Target, resultDir)'''
